{
    "contents" : "## This will find the best hosipital in the state\n\nbest <- function(state, outcome) {\n    ## Read outcome data\n    ## Check that state and outcome are valid\n    ## Return hospital name in that state with lowest 30-day death\n    ## rate\n    \n    \n    \n    data<-read.csv(\"outcome-of-care-measures.csv\",colClasses = \"character\")\n\n    ##StateIndex<-data$State\n    \n    ##myordered<-lapply(mysplit,function(x) {x[order(x$outcome),]})\n    \n    if(outcome==\"heart attack\"){\n        MortalityOfInterest<-11\n    }else if(outcome==\"heart failure\"){\n        MortalityOfInterest<-17\n    }else if(outcome==\"pneumonia\"){\n        MortalityOfInterest<-23\n    }else {\n        stop(\"invalid outcome\") \n    }\n    \n    \n    StateVector<-unique(data$State)\n    StateTest<-state %in% StateVector\n    if(StateTest==FALSE){\n        stop(\"invalid state\")\n    }\n        \n    \n    splitList<-split(data,data$State)\n    \n    OrderedStateList<-suppressWarnings(lapply(splitList,function(x) {x[order(as.numeric(x[,MortalityOfInterest]),x[,2],na.last = NA),]}))\n\n    StateDataFrame<-OrderedStateList[[state]]\n    BestHospital<-StateDataFrame[[1,2]]\n    BestHospital\n        \n#     StateData<-data[data$State==state,]\n#     maxRow<-which.max(StateData[,MortalityOfInterest])\n#     \n#     BestHospital<-StateData[maxRow,2]\n#     BestHospital\n    \n#     MinStateMortality<-min(MortalityOfInterest)\n#     BestHospitalVector<-StateData[StateData[,11]==MinStateMortality,]\n#     BestHospital<-BestHospitalVector[,2]\n#     BestHospital\n    \n#     minMortality<-tapply(MortalityOfInterest,StateIndex,min)\n#     minMortality\n}",
    "created" : 1437874682058.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1055610992",
    "id" : "DAF1EEEA",
    "lastKnownWriteTime" : 1438244369,
    "path" : "C:/Users/Ross Weston/GitHub Repos/US Medicare Hospitals/best.R",
    "project_path" : "best.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : true,
    "type" : "r_source"
}